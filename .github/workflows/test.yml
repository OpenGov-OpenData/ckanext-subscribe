name: Tests
on: [pull_request]
env:
  CODE_COVERAGE_THRESHOLD_REQUIRED: 35
jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: '3.8'
      - name: Install requirements
        run: |
          pip install flake8 pycodestyle pylint bandit
          pip install -e .
      - name: Check syntax
        run: flake8 . --count --select=E901,E999,F821,F822,F823 --show-source --statistics --exclude ckan
      - name: Run flake8
        run: flake8 . --count --max-line-length=127 --statistics --exclude ckan
      - name: Run pylint
        run: pylint --output-format=colorized ckanext/subscribe
      - name: Run bandit
        run: bandit -s B101,B610 -r ./ -f screen

  test:
#    needs: lint
    strategy:
      matrix:
        ckan-version: [2.9, 2.7]
      fail-fast: false

    name: CKAN ${{ matrix.ckan-version }}
    runs-on: ubuntu-latest
    container:
      image: openknowledge/ckan-dev:${{ matrix.ckan-version }}
    services:
      solr:
        image: ckan/ckan-solr-dev:${{ matrix.ckan-version }}
      postgres:
        image: ckan/ckan-postgres-dev:${{ matrix.ckan-version }}
#        env:
#          POSTGRES_USER: postgres
#          POSTGRES_PASSWORD: postgres
#          POSTGRES_DB: postgres
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
      redis:
          image: redis:3
    env:
      CKAN_SQLALCHEMY_URL: postgresql://ckan_default:pass@postgres/ckan_test
#      CKAN_DATASTORE_WRITE_URL: postgresql://datastore_write:pass@postgres/datastore_test
#      CKAN_DATASTORE_READ_URL: postgresql://datastore_read:pass@postgres/datastore_test
      CKAN_SOLR_URL: http://solr:8983/solr/ckan
      CKAN_REDIS_URL: redis://redis:6379/1

    steps:
    - uses: actions/checkout@v2
    - name: Install requirements
      run: |
        pip install -r requirements.txt -r dev-requirements.txt -e .

    - name: Setup extension (CKAN >= 2.9)
      if: ${{ matrix.ckan-version != '2.7' && matrix.ckan-version != '2.8' }}
      run: |
        ckan -c git_action_test.ini db init
#        ckan -c git_action_test.ini subscribe initdb
    - name: Setup extension (CKAN 2.7)
      if: ${{ matrix.ckan-version == '2.7'  }}
      run: |
        paster --plugin=ckan db init -c git_action_test.ini
#        paster --plugin=ckanext-subscribe subscribe initdb -c git_action_test.ini

    - name: Run tests (CKAN 2.7)
      if: ${{ matrix.ckan-version == '2.7'  }}
      run: |
        nosetests --nologcapture --with-pylons=git_action_test.ini --with-coverage --cover-package=ckanext.subscribe --cover-inclusive --cover-erase --cover-tests

    - name: Run tests (CKAN != 2.7)
      if: ${{ matrix.ckan-version != '2.7'  }}
      run: |
        set -o pipefail
        pytest --ckan-ini=git_action_test.ini --cov=ckanext.subscribe --cov-fail-under=${CODE_COVERAGE_THRESHOLD_REQUIRED} --disable-warnings ckanext/datajson/tests | tee pytest-coverage.txt
    - name: Report test coverage
      if: ${{ always() }}
      uses: coroo/pytest-coverage-commentator@v1.0.2
